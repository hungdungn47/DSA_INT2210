import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    /*
     * Complete the 'runningMedian' function below.
     *
     * The function is expected to return a DOUBLE_ARRAY.
     * The function accepts INTEGER_ARRAY a as parameter.
     */
    static PriorityQueue<Integer> firstHalf = new PriorityQueue<>(10, Collections.reverseOrder());
    static PriorityQueue<Integer> secondHalf = new PriorityQueue<>(10);
    public static double peekMed() {
        if(firstHalf.isEmpty()) {
            return 0;
        }
        if(firstHalf.size() == secondHalf.size()) {
            return (double)(firstHalf.peek() + secondHalf.peek()) / 2;
        }
        return (double)firstHalf.peek();
    }
    public static void update() {
        if(firstHalf.size() < secondHalf.size()) {
            firstHalf.add(secondHalf.poll());
        } else if(firstHalf.size() > secondHalf.size() + 1) {
            secondHalf.add(firstHalf.poll());
        }
    }
    public static void insert(int x) {
        if(x <= peekMed()) {
            firstHalf.add(x);
        } else {
            secondHalf.add(x);
        }
        update();
    }
    public static List<Double> runningMedian(List<Integer> a) {
        List<Double> res = new ArrayList<>();
        // Write your code here
        for(int x : a) {
            insert(x);
            res.add(peekMed());
        }
        return res;
    }

}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int aCount = Integer.parseInt(bufferedReader.readLine().trim());

        List<Integer> a = IntStream.range(0, aCount).mapToObj(i -> {
            try {
                return bufferedReader.readLine().replaceAll("\\s+$", "");
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
        })
            .map(String::trim)
            .map(Integer::parseInt)
            .collect(toList());

        List<Double> result = Result.runningMedian(a);

        bufferedWriter.write(
            result.stream()
                .map(Object::toString)
                .collect(joining("\n"))
            + "\n"
        );

        bufferedReader.close();
        bufferedWriter.close();
    }
}
