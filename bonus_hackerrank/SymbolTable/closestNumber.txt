import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    /*
     * Complete the 'closestNumbers' function below.
     *
     * The function is expected to return an INTEGER_ARRAY.
     * The function accepts INTEGER_ARRAY arr as parameter.
     */
    public static void merge(List<Integer> arr, int l, int r, int m) {
        List<Integer> arr1 = new ArrayList<>();
        List<Integer> arr2 = new ArrayList<>();
        for(int i = l; i <= m; i++) {
            arr1.add(arr.get(i));
        }
        for(int i = m + 1; i <= r; i++) {
            arr2.add(arr.get(i));
        }
        int i = 0, j = 0;
        int k = l;
        while(i < arr1.size() && j < arr2.size()) {
            if(arr1.get(i) < arr2.get(j)) {
                arr.set(k, arr1.get(i));
                i++;
            } else {
                arr.set(k, arr2.get(j));
                j++;
            }
            k++;
        }
        while(i < arr1.size()) {
            arr.set(k, arr1.get(i++));
            k++;
        }
        while(j < arr2.size()) {
            arr.set(k, arr2.get(j++));
            k++;
        }
    }
    public static void mergeSort(List<Integer> arr, int l, int r) {
        if(l < r) {
            int m = (l + r) / 2;
            mergeSort(arr, l, m);
            mergeSort(arr, m + 1, r);
            merge(arr, l, r, m);
        }
    }
    public static List<Integer> closestNumbers(List<Integer> arr) {
    // Write your code here
        mergeSort(arr, 0, arr.size() - 1);
        int minimal_difference = arr.get(1) - arr.get(0);
        for(int i = 1; i < arr.size(); i++) {
            minimal_difference = Math.min(minimal_difference, arr.get(i) - arr.get(i - 1));
        }
        List<Integer> res = new ArrayList<Integer>();
        for(int i = 1; i < arr.size(); i++) {
            if(arr.get(i) - arr.get(i - 1) == minimal_difference) {
                res.add(arr.get(i - 1));
                res.add(arr.get(i));
            }
        }
        return res;
    }

}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int n = Integer.parseInt(bufferedReader.readLine().trim());

        List<Integer> arr = Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
            .map(Integer::parseInt)
            .collect(toList());

        List<Integer> result = Result.closestNumbers(arr);

        bufferedWriter.write(
            result.stream()
                .map(Object::toString)
                .collect(joining(" "))
            + "\n"
        );

        bufferedReader.close();
        bufferedWriter.close();
    }
}
